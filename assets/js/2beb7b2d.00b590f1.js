"use strict";(self.webpackChunkclient=self.webpackChunkclient||[]).push([[629],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),u=s(n),f=a,h=u["".concat(l,".").concat(f)]||u[f]||p[f]||o;return n?r.createElement(h,i(i({ref:t},d),{},{components:n})):r.createElement(h,i({ref:t},d))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=f;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[u]="string"==typeof e?e:a,i[1]=c;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},3974:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>c,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const o={id:"Data collection",sidebar_position:2,slug:"/collection"},i="Data collection",c={unversionedId:"technical-architecture/Data collection",id:"technical-architecture/Data collection",title:"Data collection",description:"The Orcfax oracle service collects data about real world events from multiple",source:"@site/docs/technical-architecture/collection.md",sourceDirName:"technical-architecture",slug:"/collection",permalink:"/collection",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"Data collection",sidebar_position:2,slug:"/collection"},sidebar:"tutorialSidebar",previous:{title:"Architecture overview",permalink:"/architecture-overview"},next:{title:"Data calculation",permalink:"/Data calculation"}},l={},s=[{value:"Data triangulation",id:"data-triangulation",level:2}],d={toc:s},u="wrapper";function p(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"data-collection"},"Data collection"),(0,a.kt)("p",null,"The Orcfax oracle service collects data about real world events from multiple\nprimary sources using a network of decentralized validator nodes."),(0,a.kt)("p",null,"These nodes are run independently and permissionlessly by anyone that is able to\ndownload our node software and commit a small amount of our ",(0,a.kt)("a",{parentName:"p",href:"scorecard"},"FACT"),"\ntoken as stake."),(0,a.kt)("p",null,"The node software are signed binaries that ensure each node is running identical\nversions of the same code."),(0,a.kt)("p",null,"The Orcfax node provides a user-interface that allows the operator to manage\ntheir staking and rewards. They also use it to select which Orcfax data feeds\ntheir node will participate (e.g. ADA/USD)."),(0,a.kt)("h2",{id:"data-triangulation"},"Data triangulation"),(0,a.kt)("p",null,"The fact statements published by each Orcfax feed are based on data that is collected from at least three independent, primary sources."),(0,a.kt)("p",null,"Orcfax collects raw data from at least three independent sources to triangulate and average the information. For example, to determine the price of ADA to U.S. dollars, Orcfax nodes will query APIs at Kraken, Binance, and CoinGecko."),(0,a.kt)("p",null,"triangulation of data is a design principle that Orcfax has adopted as a\nmethod for developing comprehensive understandings of the phenomena which it\nreport on;"),(0,a.kt)("p",null,"it is a system requirement that each Orcfax feed utilizes a minimum\nof three sources (S1, S2, S3, Sn+1) but can accommodate a dynamic number of\nsources in order to compensate for type or the need for more sources to achieve\nvalidity."),(0,a.kt)("p",null,"These three sources can comprise of application programming interfaces\n(API\u2019s), internet of things (IoT) devices, weather stations, and crowdsourced\nreporting data (eg a series of geotagged photographs)."),(0,a.kt)("p",null,"Example\nIf the target data was the outcome or score of a football match between\nManchester United and Chelsea, Orcfax nodes could hit a sports website and\nscrape the results, do the same for a second, and for the third. At the end, the\nnode has received information regarding the target from three independent\nsources."),(0,a.kt)("p",null,"Grounding this example, nodes executing their Collection function will receive\nat least three API responses similar to the below example."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'{\n  "@context": "https://schema.org",\n  "type": "Message",\n  "name": "ADA-USD",\n  "sender": "api-name",\n  "identifier": "",\n  "dateReceived": "Wed, 19 Jul 2023 16:38:41 GMT",\n  "messageAttachment": {\n    "encoding": "application/json;base64",\n    "text": ""\n  }\n}\n')))}p.isMDXComponent=!0}}]);